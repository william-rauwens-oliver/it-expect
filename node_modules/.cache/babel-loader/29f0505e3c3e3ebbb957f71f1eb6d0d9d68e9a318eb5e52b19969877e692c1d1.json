{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/finance-flow/finance-flow/src/components/HistoryChart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HistoryChart({\n  transactions\n}) {\n  // Préparer les données pour l'historique des transactions\n  const transactionDates = transactions.map(t => t.date);\n  const transactionAmounts = transactions.map(t => t.montant);\n\n  // Calculer le solde cumulatif\n  let cumulativeBalance = 0;\n  const cumulativeBalances = transactions.map(t => {\n    cumulativeBalance += t.type === 'revenu' ? parseFloat(t.montant) : -parseFloat(t.montant);\n    return cumulativeBalance;\n  });\n\n  // Configuration pour le graphique de l'historique des transactions\n  const transactionData = {\n    labels: transactionDates,\n    datasets: [{\n      label: 'Historique des Transactions',\n      data: transactionAmounts,\n      fill: false,\n      borderColor: 'blue',\n      backgroundColor: 'blue',\n      tension: 0.1\n    }]\n  };\n\n  // Configuration pour le graphique du solde cumulatif\n  const cumulativeData = {\n    labels: transactionDates,\n    datasets: [{\n      label: 'Solde Cumulatif',\n      data: cumulativeBalances,\n      fill: true,\n      backgroundColor: 'rgba(255, 99, 132, 0.3)',\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 2,\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Historique des Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: transactionData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Solde Cumulatif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: cumulativeData,\n        options: {\n          plugins: {\n            legend: {\n              display: true\n            }\n          },\n          elements: {\n            line: {\n              fill: true // Força explicitement le remplissage\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_c = HistoryChart;\nexport default HistoryChart;\nvar _c;\n$RefreshReg$(_c, \"HistoryChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","jsxDEV","_jsxDEV","HistoryChart","transactions","transactionDates","map","t","date","transactionAmounts","montant","cumulativeBalance","cumulativeBalances","type","parseFloat","transactionData","labels","datasets","label","data","fill","borderColor","backgroundColor","tension","cumulativeData","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","options","plugins","legend","display","elements","line","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/finance-flow/finance-flow/src/components/HistoryChart.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\n\nfunction HistoryChart({ transactions }) {\n    // Préparer les données pour l'historique des transactions\n    const transactionDates = transactions.map((t) => t.date);\n    const transactionAmounts = transactions.map((t) => t.montant);\n\n    // Calculer le solde cumulatif\n    let cumulativeBalance = 0;\n    const cumulativeBalances = transactions.map((t) => {\n        cumulativeBalance += t.type === 'revenu' ? parseFloat(t.montant) : -parseFloat(t.montant);\n        return cumulativeBalance;\n    });\n\n    // Configuration pour le graphique de l'historique des transactions\n    const transactionData = {\n        labels: transactionDates,\n        datasets: [\n            {\n                label: 'Historique des Transactions',\n                data: transactionAmounts,\n                fill: false,\n                borderColor: 'blue',\n                backgroundColor: 'blue',\n                tension: 0.1,\n            },\n        ],\n    };\n\n    // Configuration pour le graphique du solde cumulatif\n    const cumulativeData = {\n        labels: transactionDates,\n        datasets: [\n            {\n                label: 'Solde Cumulatif',\n                data: cumulativeBalances,\n                fill: true,\n                backgroundColor: 'rgba(255, 99, 132, 0.3)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 2,\n                tension: 0.1,\n            },\n        ],\n    };\n\n    return (\n        <div>\n            <div>\n                <h3>Historique des Transactions</h3>\n                <Line data={transactionData} />\n            </div>\n            <div>\n                <h3>Solde Cumulatif</h3>\n                <Line data={cumulativeData} options={{\n                    plugins: {\n                        legend: {\n                            display: true,\n                        },\n                    },\n                    elements: {\n                        line: {\n                            fill: true,  // Força explicitement le remplissage\n                        },\n                    },\n                }} />\n            </div>\n        </div>\n    );\n}\n\nexport default HistoryChart;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAC;EAAEC;AAAa,CAAC,EAAE;EACpC;EACA,MAAMC,gBAAgB,GAAGD,YAAY,CAACE,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC;EACxD,MAAMC,kBAAkB,GAAGL,YAAY,CAACE,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACG,OAAO,CAAC;;EAE7D;EACA,IAAIC,iBAAiB,GAAG,CAAC;EACzB,MAAMC,kBAAkB,GAAGR,YAAY,CAACE,GAAG,CAAEC,CAAC,IAAK;IAC/CI,iBAAiB,IAAIJ,CAAC,CAACM,IAAI,KAAK,QAAQ,GAAGC,UAAU,CAACP,CAAC,CAACG,OAAO,CAAC,GAAG,CAACI,UAAU,CAACP,CAAC,CAACG,OAAO,CAAC;IACzF,OAAOC,iBAAiB;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAMI,eAAe,GAAG;IACpBC,MAAM,EAAEX,gBAAgB;IACxBY,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,6BAA6B;MACpCC,IAAI,EAAEV,kBAAkB;MACxBW,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,MAAM;MACnBC,eAAe,EAAE,MAAM;MACvBC,OAAO,EAAE;IACb,CAAC;EAET,CAAC;;EAED;EACA,MAAMC,cAAc,GAAG;IACnBR,MAAM,EAAEX,gBAAgB;IACxBY,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,iBAAiB;MACxBC,IAAI,EAAEP,kBAAkB;MACxBQ,IAAI,EAAE,IAAI;MACVE,eAAe,EAAE,yBAAyB;MAC1CD,WAAW,EAAE,uBAAuB;MACpCI,WAAW,EAAE,CAAC;MACdF,OAAO,EAAE;IACb,CAAC;EAET,CAAC;EAED,oBACIrB,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,gBACIxB,OAAA;QAAAwB,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC5B,OAAA,CAACJ,IAAI;QAACqB,IAAI,EAAEJ;MAAgB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACN5B,OAAA;MAAAwB,QAAA,gBACIxB,OAAA;QAAAwB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB5B,OAAA,CAACJ,IAAI;QAACqB,IAAI,EAAEK,cAAe;QAACO,OAAO,EAAE;UACjCC,OAAO,EAAE;YACLC,MAAM,EAAE;cACJC,OAAO,EAAE;YACb;UACJ,CAAC;UACDC,QAAQ,EAAE;YACNC,IAAI,EAAE;cACFhB,IAAI,EAAE,IAAI,CAAG;YACjB;UACJ;QACJ;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACO,EAAA,GAlEQlC,YAAY;AAoErB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}