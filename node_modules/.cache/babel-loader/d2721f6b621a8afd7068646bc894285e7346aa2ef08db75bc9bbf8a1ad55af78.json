{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/finance-flow/finance-flow/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TransactionForm from './components/TransactionForm';\nimport TransactionList from './components/TransactionList';\nimport Solde from './components/Solde';\nimport './App.css';\nimport './chartConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [solde, setSolde] = useState(0);\n\n  // Récupérer les transactions depuis l'API\n  const fetchTransactions = async () => {\n    try {\n      const response = await axios.get('http://localhost:8888/finance-flow/finance-flow/src/api.php');\n      setTransactions(response.data);\n      calculateSolde(response.data);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des transactions :\", error);\n    }\n  };\n\n  // Calculer le solde en fonction des transactions\n  const calculateSolde = transactions => {\n    const total = transactions.reduce((acc, tr) => acc + (tr.type === 'revenu' ? parseFloat(tr.montant) : -parseFloat(tr.montant)), 0);\n    setSolde(total);\n  };\n\n  // Ajouter une transaction et mettre à jour la liste\n  const handleAddTransaction = async transaction => {\n    try {\n      const response = await axios.post('http://localhost:/finance-flow/api.php', transaction);\n      if (response.data.status === 'success') {\n        fetchTransactions(); // Rafraîchir les transactions après ajout\n      } else {\n        alert(response.data.message);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de l'ajout de la transaction :\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mon Gestionnaire de Budget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Solde, {\n      solde: solde\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TransactionForm, {\n      onAddTransaction: handleAddTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TransactionList, {\n      transactions: transactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Y/ugPSf/JfoAmI895xaYOwOokbY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","TransactionForm","TransactionList","Solde","jsxDEV","_jsxDEV","App","_s","transactions","setTransactions","solde","setSolde","fetchTransactions","response","get","data","calculateSolde","error","console","total","reduce","acc","tr","type","parseFloat","montant","handleAddTransaction","transaction","post","status","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTransaction","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/finance-flow/finance-flow/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TransactionForm from './components/TransactionForm';\nimport TransactionList from './components/TransactionList';\nimport Solde from './components/Solde';\nimport './App.css';\nimport './chartConfig';\n\nfunction App() {\n    const [transactions, setTransactions] = useState([]);\n    const [solde, setSolde] = useState(0);\n\n    // Récupérer les transactions depuis l'API\n    const fetchTransactions = async () => {\n        try {\n            const response = await axios.get('http://localhost:8888/finance-flow/finance-flow/src/api.php');\n            setTransactions(response.data);\n            calculateSolde(response.data);\n        } catch (error) {\n            console.error(\"Erreur lors de la récupération des transactions :\", error);\n        }\n    };\n\n    // Calculer le solde en fonction des transactions\n    const calculateSolde = (transactions) => {\n        const total = transactions.reduce((acc, tr) => acc + (tr.type === 'revenu' ? parseFloat(tr.montant) : -parseFloat(tr.montant)), 0);\n        setSolde(total);\n    };\n\n    // Ajouter une transaction et mettre à jour la liste\n    const handleAddTransaction = async (transaction) => {\n        try {\n            const response = await axios.post('http://localhost:/finance-flow/api.php', transaction);\n            if (response.data.status === 'success') {\n                fetchTransactions();  // Rafraîchir les transactions après ajout\n            } else {\n                alert(response.data.message);\n            }\n        } catch (error) {\n            console.error(\"Erreur lors de l'ajout de la transaction :\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchTransactions();\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header>\n                <h1>Mon Gestionnaire de Budget</h1>\n            </header>\n            <Solde solde={solde} />\n            <TransactionForm onAddTransaction={handleAddTransaction} />\n            <TransactionList transactions={transactions} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}